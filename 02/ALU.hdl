// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   // if zx then x=0
   Not16(in=x, out=notx);
   Add16(a=x, b=notx, out=xPlusNotx);
   Not16(in=xPlusNotx, out=Xis0);
   Mux16(a=x, b=Xis0, sel=zx, out=XatZX);

   // if nx then x=!x
   Mux16(a=x, b=notx, sel=nx, out=XatNX);

   // Select the right X value
   Mux4Way16(a=x, b=Xis0, c=notx, d=xPlusNotx, sel[0]=zx, sel[1]=nx, out=xAtF);


   // if zy then y=!y
   Not16(in=y, out=noty);
   Add16(a=y, b=noty, out=yPlusNoty);
   Not16(in=yPlusNoty, out=Yis0);
   Mux16(a=y, b=Yis0, sel=zy, out=YatZY);

   // if ny then y=!y
   Mux16(a=y, b=noty, sel=ny, out=YatNY);


   // Select the right Y value
   Mux4Way16(a=y, b=Yis0, c=noty, d=yPlusNoty, sel[0]=zy, sel[1]=ny, out=yAtF);


   // select + or And and execute 'f'
   And16(a=xAtF, b=yAtF, out=fXandY);
   Add16(a=xAtF, b=yAtF, out=fXplusY);
   Mux16(a=fXandY, b=fXplusY, sel=f, out=outAtNo);

   // postset out with 'no'
   Not16(in=outAtNo, out=notOut);



   // 'ng'
   Mux16(a=outAtNo, b=notOut, sel=no, out=outx);
   And16(a=outx, b=true, out[15]=ng);

   // 'zr'
   Or16Way(in=outx, out=outzr);
   Not(in=outzr, out=zr);


   // out
   Mux16(a=outAtNo, b=notOut, sel=no, out=out);



}
